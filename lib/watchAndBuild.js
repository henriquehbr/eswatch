import{a as V}from"./chunk.FU2CJQ5F.js";var x=Object.create,l=Object.defineProperty,E=Object.getPrototypeOf,F=Object.prototype.hasOwnProperty,j=Object.getOwnPropertyNames,C=Object.getOwnPropertyDescriptor,_=t=>l(t,"__esModule",{value:!0}),v=(t,e)=>()=>(e||(e={exports:{}},t(e.exports,e)),e.exports),A=(t,e,r)=>{if(_(t),e&&typeof e=="object"||typeof e=="function")for(let s of j(e))!F.call(t,s)&&s!=="default"&&l(t,s,{get:()=>e[s],enumerable:!(r=C(e,s))||r.enumerable});return t},L=t=>t&&t.__esModule?t:A(l(t!=null?x(E(t)):{},"default",{value:t,enumerable:!0}),t),u=v((q,p)=>{"use strict";p.exports=t=>{const e=/^\\\\\?\\/.test(t),r=/[^\u0000-\u0080]+/.test(t);return e||r?t:t.replace(/\\/g,"/")}});import{spawn as D}from"child_process";import{builtinModules as M}from"module";import h from"path";import N from"readline";import{fileURLToPath as O}from"url";import T from"esbuild";import R from"is-glob";const c=L(u());import S from"path";import $ from"tiny-glob";const B=async t=>{const e=S.normalize(t),r=c.default(e),s=await $(r),n=s.map(c.default);return n};var f=B;import{existsSync as G}from"fs";const I=async t=>{try{return await new Promise((e,r)=>G(t)?e(t):r(`Couldn't find ${t} entry point`))}catch(e){throw new Error(e)}};var y=I;const z=async t=>{const e=t._.length<1&&!t.entry;if(e)throw new Error("Missing entry point");const r=t.entry?[t.entry]:t._,s=r.map(async a=>R(a)?await f(a):await y(a)),n=await Promise.all(s),i=n.flat();return i};var g=z;const W=h.dirname(O(import.meta.url));let m,P;const o=V(),d=N.createInterface({input:process.stdin,output:process.stdout});g(o).then(t=>P=t);const k=async()=>{const t=o.format==="esm"?o.splitting:!1,e=o.outext?{".js":o.outext}:{".js":".js"},r=o.outdir??h.join(W,"build"),s=[...M];if(!o.standalone){const{getDependencies:i}=await import("./getDependencies.js");s.push(...await i())}o.external&&s.push(...o.external),m?.kill();const n=await T.startService();return o.clear&&console.clear(),await n.build({bundle:o.bundle,entryPoints:P,outExtension:e,format:o.format,minify:o.minify,outdir:r,platform:o.platform,...o.bundle&&{external:s,splitting:t}}),n.stop(),new Promise(i=>{if(o.run){d.pause();const a=typeof o.run=="string"?o.run:`node ${r}`,[w]=a.split(" "),b=a.split(" ").slice(1);m=D(w,b,{stdio:"inherit"}),m.on("close",()=>{d.resume(),o.watch?i():process.exit()})}else console.log(`${o.entry||o._.join(", ")} built successfully on ${o.outdir}`),d.close(),i()})};export{k as watchAndBuild};
