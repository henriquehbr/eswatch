import{a as T}from"./chunk.FU2CJQ5F.js";var b=Object.create,l=Object.defineProperty,E=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty,F=Object.getOwnPropertyNames,C=Object.getOwnPropertyDescriptor,_=t=>l(t,"__esModule",{value:!0}),v=(t,e)=>()=>(e||(e={exports:{}},t(e.exports,e)),e.exports),A=(t,e,o)=>{if(_(t),e&&typeof e=="object"||typeof e=="function")for(let s of F(e))!x.call(t,s)&&s!=="default"&&l(t,s,{get:()=>e[s],enumerable:!(o=C(e,s))||o.enumerable});return t},L=t=>t&&t.__esModule?t:A(l(t!=null?b(E(t)):{},"default",{value:t,enumerable:!0}),t),u=v((U,p)=>{"use strict";p.exports=t=>{const e=/^\\\\\?\\/.test(t),o=/[^\u0000-\u0080]+/.test(t);return e||o?t:t.replace(/\\/g,"/")}});import{spawn as z}from"child_process";import{builtinModules as D}from"module";import h from"path";import M from"readline";import{fileURLToPath as N}from"url";import O from"esbuild";import R from"is-glob";const c=L(u());import S from"path";import $ from"tiny-glob";const B=async t=>{const e=S.normalize(t),o=c.default(e),s=await $(o),i=s.map(c.default);return i};var f=B;import{existsSync as G}from"fs";const I=async t=>{try{return await new Promise((e,o)=>G(t)?e(t):o(`Couldn't find ${t} entry point`))}catch(e){throw new Error(e)}};var y=I;const j=async t=>{const e=t._.length<1&&!t.entry;if(e)throw new Error("Missing entry point");const o=t.entry?[t.entry]:t._,s=o.map(async n=>R(n)?await f(n):await y(n)),i=await Promise.all(s),a=i.flat();return a};var g=j;const V=h.dirname(N(import.meta.url));let m,P;const r=T(),d=M.createInterface({input:process.stdin,output:process.stdout});g(r).then(t=>P=t);const W=async()=>{const t=r.format==="esm"?r.splitting:!1,e=r.outdir??h.join(V,"build"),o=[...D];if(!r.standalone){const{getDependencies:i}=await import("./getDependencies.js");o.push(...await i())}r.external&&o.push(...r.external),m?.kill();const s=await O.startService();return r.clear&&console.clear(),await s.build({bundle:r.bundle,entryPoints:P,format:r.format,minify:r.minify,outdir:e,platform:r.platform,...r.bundle&&{external:o,splitting:t}}),s.stop(),new Promise(i=>{if(r.run){d.pause();const a=typeof r.run=="string"?r.run:`node ${e}`,[n]=a.split(" "),w=a.split(" ").slice(1);m=z(n,w,{stdio:"inherit"}),m.on("close",()=>{d.resume(),r.watch?i():process.exit()})}else console.log(`${r.entry||r._.join(", ")} built successfully on ${r.outdir}`),d.close(),i()})};export{W as watchAndBuild};
