var F=Object.create,o=Object.defineProperty,I=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty,S=Object.getOwnPropertyNames,B=Object.getOwnPropertyDescriptor,v=t=>o(t,"__esModule",{value:!0}),O=(t,e)=>()=>(e||(e={exports:{}},t(e.exports,e)),e.exports),R=(t,e,s)=>{if(v(t),e&&typeof e=="object"||typeof e=="function")for(let r of S(e))!L.call(t,r)&&r!=="default"&&o(t,r,{get:()=>e[r],enumerable:!(s=B(e,r))||s.enumerable});return t},j=t=>t&&t.__esModule?t:R(o(t!=null?F(I(t)):{},"default",{value:t,enumerable:!0}),t),y=O((at,h)=>{"use strict";h.exports=t=>{let e=/^\\\\\?\\/.test(t),s=/[^\u0000-\u0080]+/.test(t);return e||s?t:t.replace(/\\/g,"/")}});import C from"esbuild";import H from"rimraf";import z from"readline";import a from"path";import{spawn as G}from"child_process";var T=t=>{let e=a.parse(t).name;return e==="index"},k=(t,e)=>{let s=a.parse(t).name,r=e.outext||".js",i=s+r,n=a.resolve(e.outdir,i);return n},W=t=>{let e=t.entryPoints.find(T),s=e||t.entryPoints[0];return k(s,t)},$=t=>{if(typeof t.run=="string")return t.run;{let e=W(t);return"node "+e}},p=t=>{let e=$(t),[s]=e.split(" "),r=e.split(" ").slice(1),i=G(s,r,{stdio:"inherit"});return i},l,c=z.createInterface({input:process.stdin,output:process.stdout}),u=t=>new Promise(async e=>{t.clear&&console.clear(),l?.kill(),t.run?(c.pause(),l=p(t),l.on("close",()=>{c.resume(),t.watch?e():process.exit()})):(console.log(`${t.entryPoints.join(", ")} built successfully on ${t.outdir}`),c.close(),e())});import f from"path";import{fileURLToPath as D}from"url";import{builtinModules as N}from"module";var V=f.dirname(D(import.meta.url)),g=async t=>{let e=t.outext?{".js":t.outext}:{".js":".js"},s=[t.outdir||[V,"build"]].flat(),r=f.resolve(...s),i=[...N];if(!t.standalone){let{getDependencies:n}=await import("./helpers/getDependencies.js");i.push(...await n())}return t.external&&i.push(...t.external),{outExtension:e,outdir:r,external:i}};import U from"is-glob";var m=j(y());import _ from"path";import A from"tiny-glob";var P=async t=>{let e=_.normalize(t),s=m.default(e),r=await A(s),i=r.map(m.default);return i};import{existsSync as M}from"fs";var w=async t=>{try{return await new Promise((e,s)=>M(t)?e(t):s(`Couldn't find ${t} entry point`))}catch(e){throw new Error(e)}},q=async t=>U(t)?await P(t):await w(t),x=async t=>{let e=t.map(q),s=await Promise.all(e),r=s.flat();return r},b=async t=>{let e=await x(t.entryPoints),{external:s,outExtension:r,outdir:i}=await g(t);return{outdir:i,outExtension:r,entryPoints:e,bundle:t.bundle,format:t.format,incremental:t.incremental,minify:t.minify,platform:t.platform,...t.bundle&&{external:s,splitting:t.splitting}}},d=async t=>{for(let e of t)await e()},J=async t=>{let e=await b(t);!t.keepfiles&&H.sync(e.outdir);let s=t.watch&&await C.startService(),r=(s||C).build.bind(void 0,e),i=u.bind(void 0,t),n=[r,i];if(t.watch){let E=await import("chokidar");E.watch(t.watch).on("ready",async()=>await d(n)).on("change",async()=>await d(n))}else await d(n)};export{J as initEsbuild};
