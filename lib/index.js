import _ from"minimist";import{existsSync as h}from"fs";const u=t=>{const s=t._.length<1&&!t.entry,a=!t._.every(r=>h(r));if(s)throw new Error("Missing entry point");if(a)throw new Error("Entry point not found")};import{spawn as w}from"child_process";import{builtinModules as g}from"module";import f from"path";import P from"readline";import{fileURLToPath as b}from"url";import E from"esbuild";const v=f.dirname(b(import.meta.url));let l;const c=P.createInterface({input:process.stdin,output:process.stdout}),x=async t=>{const s=t.entry?[t.entry]:t._,a=t.format==="esm"?t.splitting:!1,r=t.outdir??f.join(v,"build"),i=[...g];if(!t.standalone){const{default:n}=await import("./getDependencies.js");i.push(...await n())}t.external&&i.push(...t.external),console.log(i),l?.kill();const d=await E.startService();return t.clear&&console.clear(),await d.build({bundle:t.bundle,entryPoints:s,format:t.format,minify:t.minify,outdir:r,platform:t.platform,...t.bundle&&{external:i,splitting:a}}),d.stop(),new Promise(n=>{if(t.run){c.pause();const m=typeof t.run=="string"?t.run:`node ${r}`,[y]=m.split(" "),p=m.split(" ").slice(1);l=w(y,p,{stdio:"inherit"}),l.on("close",()=>{c.resume(),t.watch?n():process.exit()})}else console.log(`${t.entry||t._.join(", ")} built successfully on ${t.outdir}`),c.close(),n()})};var o=x;const e=_(process.argv.slice(2));u(e);e.watch?import("chokidar").then(({default:t})=>t.watch(e.watch).on("ready",async()=>o(e)).on("change",async()=>o(e))):o(e);
