#!/usr/bin/env node
import B from"minimist";import{spawn as p}from"child_process";import{builtinModules as y}from"module";import d from"path";import w from"readline";import{fileURLToPath as b}from"url";import g from"esbuild";const v=d.dirname(b(import.meta.url));let s;const a=w.createInterface({input:process.stdin,output:process.stdout}),A=async e=>{const m=e.entry?[e.entry]:e._,u=e.format==="esm"?e.splitting:!1,l=e.outdir??d.join(v,"build"),n=[...y];if(!e.standalone){const{default:i}=await import("./getDependencies.js");n.push(...await i())}e.external&&n.push(...e.external),s?.kill();const o=await g.startService();return e.clear&&console.clear(),await o.build({bundle:e.bundle,entryPoints:m,format:e.format,minify:e.minify,outdir:l,platform:e.platform,...e.bundle&&{external:n,splitting:u}}),o.stop(),new Promise(i=>{if(e.run){a.pause();const c=typeof e.run=="string"?e.run:`node ${l}`,[f]=c.split(" "),h=c.split(" ").slice(1);s=p(f,h,{stdio:"inherit"}),s.on("close",()=>{a.resume(),e.watch?i():process.exit()})}else console.log(`${e.entry||e._.join(", ")} built successfully on ${e.outdir}`),a.close(),i()})};var r=A;const t=B(process.argv.slice(2));t.version?import("./displayVersion.js").then(({default:e})=>e()):(import("./validateEntryPoints.js").then(({default:e})=>e(t)),t.watch?import("chokidar").then(({default:e})=>e.watch(t.watch).on("ready",async()=>r(t)).on("change",async()=>r(t))):r(t));
