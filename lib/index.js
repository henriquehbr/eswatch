import x from"minimist";import{existsSync as h}from"fs";const u=t=>{const o=t._.length<1&&!t.entry,s=!t._.every(r=>h(r));if(o)throw new Error("Missing entry point");if(s)throw new Error("Entry point not found")};import{spawn as w}from"child_process";import{builtinModules as g}from"module";import f from"path";import P from"readline";import{fileURLToPath as b}from"url";import E from"esbuild";const v=f.dirname(b(import.meta.url));let a;const l=P.createInterface({input:process.stdin,output:process.stdout}),_=async t=>{const o=t.entry?[t.entry]:t._,s=t.format==="esm"?t.splitting:!1,r=t.outdir??f.join(v,"build"),c=[...g];if(!t.standalone){const{default:i}=await import("./getDependencies.js");c.push(...await i())}a?.kill();const d=await E.startService();return t.clear&&console.clear(),await d.build({bundle:t.bundle,entryPoints:o,format:t.format,minify:t.minify,outdir:r,platform:t.platform,...t.bundle&&{external:c,splitting:s}}),d.stop(),new Promise(i=>{if(t.run){l.pause();const m=typeof t.run=="string"?t.run:`node ${r}`,[p]=m.split(" "),y=m.split(" ").slice(1);a=w(p,y,{stdio:"inherit"}),a.on("close",()=>{l.resume(),t.watch?i():process.exit()})}else console.log(`${t.entry||t._.join(", ")} built successfully on ${t.outdir}`),l.close(),i()})};var n=_;const e=x(process.argv.slice(2));u(e);e.watch?import("chokidar").then(({default:t})=>t.watch(e.watch).on("ready",async()=>n(e)).on("change",async()=>n(e))):n(e);
