import _ from"minimist";import{existsSync as h}from"fs";const d=t=>{const o=t._.length<1&&!t.entry,s=!t._.every(r=>h(r));if(o)throw new Error("Missing entry point");if(s)throw new Error("Invalid entry point")};import c from"path";import w from"readline";import{fileURLToPath as g}from"url";import{spawn as P}from"child_process";import{builtinModules as b}from"module";import v from"esbuild";const E=c.dirname(g(import.meta.url));let n;const p=w.createInterface({input:process.stdin,output:process.stdout}),a=async t=>{const o=t.entry?[t.entry]:t._,s=t.format==="esm"?t.splitting:!1,r=t.outdir||c.join(E,"build"),l=[...b];if(!t.standalone){const{getDependencies:i}=await import("./getDependencies.js");l.push(...await i())}n&&n.kill();const u=await v.startService();return t.clear&&console.clear(),await u.build({bundle:t.bundle,platform:t.platform,...t.bundle&&{external:l,splitting:s},format:t.format,minify:t.minify,entryPoints:o,outdir:r}),new Promise(i=>{if(t.run){p.pause();const m=typeof t.run=="string"?t.run:`node ${r}`,f=m.split(" ").shift(),y=m.split(" ").slice(1);n=P(f,y,{stdio:"inherit"}),n.on("close",()=>{p.resume(),i()})}else i()})},e=_(process.argv.slice(2));d(e);e.watch?import("chokidar").then(({default:t})=>t.watch(e.watch).on("ready",async()=>a(e)).on("change",async()=>a(e))):a(e);
