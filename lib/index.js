#!/usr/bin/env node
var O=Object.create,p=Object.defineProperty,L=Object.getPrototypeOf,I=Object.prototype.hasOwnProperty,F=Object.getOwnPropertyNames,B=Object.getOwnPropertyDescriptor,v=t=>p(t,"__esModule",{value:!0}),j=(t,o)=>()=>(o||(o={exports:{}},t(o.exports,o)),o.exports),_=(t,o,s)=>{if(v(t),o&&typeof o=="object"||typeof o=="function")for(let i of F(o))!I.call(t,i)&&i!=="default"&&p(t,i,{get:()=>o[i],enumerable:!(s=B(o,i))||s.enumerable});return t},G=t=>t&&t.__esModule?t:_(p(t!=null?O(L(t)):{},"default",{value:t,enumerable:!0}),t),g=j((et,f)=>{"use strict";f.exports=t=>{const o=/^\\\\\?\\/.test(t),s=/[^\u0000-\u0080]+/.test(t);return o||s?t:t.replace(/\\/g,"/")}});import C from"esbuild";import R from"minimist";const S=()=>{const t=R(process.argv.slice(2));return t};var e=S;import k from"readline";import{spawn as V}from"child_process";const $=t=>{const o=typeof t.run=="string"?t.run:`node ${t.outdir}`,[s]=o.split(" "),i=o.split(" ").slice(1),r=V(s,i,{stdio:"inherit"});return r};var u=$;let m;const c=k.createInterface({input:process.stdin,output:process.stdout}),l=async()=>{const t=e();return t.clear&&console.clear(),m?.kill(),new Promise(o=>{t.run?(c.pause(),m=u(t),m.on("close",()=>{c.resume(),t.watch?o():process.exit()})):(console.log(`${t.entry||t._.join(", ")} built successfully on ${t.outdir}`),c.close(),o())})};import A from"is-glob";const d=G(g());import z from"path";import D from"tiny-glob";const M=async t=>{const o=z.normalize(t),s=d.default(o),i=await D(s),r=i.map(d.default);return r};var y=M;import{existsSync as N}from"fs";const T=async t=>{try{return await new Promise((o,s)=>N(t)?o(t):s(`Couldn't find ${t} entry point`))}catch(o){throw new Error(o)}};var P=T;const U=async t=>{const o=t._.length<1&&!t.entry;if(o)throw new Error("Missing entry point");const s=t.entry?[t.entry]:t._,i=s.map(async a=>A(a)?await y(a):await P(a)),r=await Promise.all(i),n=r.flat();return n};var b=U;import h from"path";import{fileURLToPath as q}from"url";import{builtinModules as H}from"module";const J=h.dirname(q(import.meta.url)),K=async()=>{const t=e(),o=t.format==="esm"?t.splitting:!1,s=!!t.watch,i=t.outext?{".js":t.outext}:{".js":".js"},r=t.outdir??h.join(J,"build"),n=[...H];if(!t.standalone){const{getDependencies:a}=await import("./getDependencies.js");n.push(...await a())}return t.external&&n.push(...t.external),{splitting:o,incremental:s,outExtension:i,outdir:r,external:n}};var w=K;const x=async()=>{const t=e(),o=await b(t),{external:s,incremental:i,outExtension:r,outdir:n,splitting:a}=await w();return{bundle:t.bundle,entryPoints:o,format:t.format,incremental:i,minify:t.minify,outdir:n,outExtension:r,platform:t.platform,...t.bundle&&{external:s,splitting:a}}},E=async t=>{const o=await x(t),s=t.watch&&await C.startService();if(s){const i=await import("chokidar"),{rebuild:r}=await s.build({...o,incremental:!0});i.watch(t.watch).on("ready",async()=>await Promise.all([r(),l()])).on("change",async()=>await Promise.all([r(),l()]))}else await C.build(o),await l()},Q=async()=>{const t=e();if(t.version){const{displayVersion:o}=await import("./displayVersion.js");return o()}await E(t)};Q();
