#!/usr/bin/env node
import x from"minimist";import{existsSync as h}from"fs";const d=e=>{const i=e._.length<1&&!e.entry,t=!e._.every(r=>h(r));if(i)throw new Error("Missing entry point");if(t)throw new Error("Invalid entry point")};import l from"path";import P from"readline";import{fileURLToPath as b}from"url";import{spawn as v}from"child_process";import{builtinModules as E}from"module";import k from"esbuild";import{readFileSync as g}from"fs";import w from"find-up";const m=async()=>{const e=await w("package.json");if(e){const i=g(e,{encoding:"utf-8"}),t=JSON.parse(i),r=Object.keys(t.dependencies);return r}else return[]},_=l.dirname(b(import.meta.url));let o;const p=P.createInterface({input:process.stdin,output:process.stdout}),s=async e=>{const i=e.entry?[e.entry]:e._,t=e.outdir||l.join(_,"build"),r=await m();o&&o.kill();const u=await k.startService();return e.clear&&console.clear(),await u.build({bundle:e.bundle,...e.bundle&&{external:[...r,...E]},format:e.format,splitting:e.splitting,minify:e.minify,entryPoints:i,outdir:t}),new Promise(a=>{if(e.run){p.pause();const c=typeof e.run=="string"?e.run:`node ${t}`,f=c.split(" ").shift(),y=c.split(" ").slice(1);o=v(f,y,{stdio:"inherit"}),o.on("close",()=>{p.resume(),a()})}else a()})},n=x(process.argv.slice(2));d(n);n.watch?import("chokidar").then(({default:e})=>e.watch(n.watch).on("ready",async()=>s(n)).on("change",async()=>s(n))):s(n);
